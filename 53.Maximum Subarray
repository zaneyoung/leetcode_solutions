53. Maximum Subarray

Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [-2,1,-3,4,-1,2,1,-5,4],
the contiguous subarray [4,-1,2,1] has the largest sum = 6.

题意：在一个数组（至少包含1个数字）中找出一个连续的子数组，该子数组的和最大。

思路：采用DP(dynamic programming)思想，假设该数组nums[]有n个数字，分解该数组为nums[0:n-1]和最后一个数字nums[n];
那么问题转化为：
求解nums[n-1]数组的最大和子数组。
继续分化该问题，把nums[n-1]数组分解为nums[0:n-2]和最后一个数字nums[n-1];
那么问题转化为：
求解nums[n-2]数组的最大和子数组。
继续分解该问题：
nums[n-3] ... nums[n-4] ... nums[2] ... nums[1] ... nums[0]
转移方程式为：maxSum(nums[n]) = max(maxSum(nums[n-1])+nums[n],nums[n]) = (maxSum(nums[n-1]) > 0 ? maxSum(nums[n-1]) : 0) + nums[n]


maxSum(nums[0])是确定的。
算法：
public int maxSubArray(int[] nums) {
    int length = nums.length;
    int[] dp = new int[length]; //dp[i]为nums[0:i]的最大和
    dp[0] = nums[0];
    int max = dp[0];
    for(int i=1;i<length;i++) {
        dp[i] = nums[i] + (dp[i-1] > 0 ? dp[i-1] : 0);
        max = Math.max(max, dp[i]);
    }
    return max;
}
